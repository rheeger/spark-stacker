---
description:
globs:
alwaysApply: true
---
# Comprehensive File and Folder Naming Convention

This guide establishes consistent file and folder naming conventions for the Spark Stacker monorepo to optimize organization, tool compatibility, and developer experience across all code types.

## Directory Naming Rules

### Use **Dot (.)** prefix for:

#### 1. Hidden Configuration & Tool Files
- Files that should be hidden by default in file explorers
- Configuration files managed by development tools
- System metadata directories

**Examples:**
- [.git/](mdc:.git) - Git repository metadata
- [.github/](mdc:.github) - GitHub Actions and templates
- [.nx/](mdc:.nx) - NX monorepo build cache
- [.vscode/](mdc:.vscode) - VS Code workspace settings
- [.cursor/](mdc:.cursor) - Cursor editor configuration
- [packages/spark-app/.venv/](mdc:packages/spark-app/.venv) - Python virtual environment
- [.pytest_cache/](mdc:.pytest_cache) - Pytest test cache

#### 2. Configuration Files
- `.env` - Environment variables
- `.prettierrc` - Code formatting rules
- `.DS_Store` - macOS system files
- `.gitignore` - Git ignore patterns

### Use **Underscore (_)** prefix for:

#### 1. Visible Generated Content
- Build outputs and generated reports that developers frequently access
- Content that should be sorted to the top but remain visible
- Temporary directories that are part of the development workflow

**Examples:**
- [_htmlcov/](mdc:_htmlcov) - Coverage reports (developers browse these)
- [packages/spark-app/_logs/](mdc:packages/spark-app/_logs) - Application logs for debugging

#### 2. Test Utilities & Helpers
- [packages/spark-app/tests/_helpers/](mdc:packages/spark-app/tests/_helpers) - Test helper functions
- [packages/spark-app/tests/_fixtures/](mdc:packages/spark-app/tests/_fixtures) - Test data fixtures
- [packages/spark-app/tests/_utils/](mdc:packages/spark-app/tests/_utils) - Test CLI tools and scripts

### Use **Double Underscore (__)** prefix for:

#### 1. Special Python Directories
- `__pycache__/` - Python bytecode cache (required name)
- [packages/spark-app/tests/__test_data__/](mdc:packages/spark-app/tests/__test_data__) - Static test datasets
- `__test_results__/` - Generated test outputs (gitignored)

#### 2. Language-Specific Conventions
- `__init__.py` - Python package initialization files
- `__main__.py` - Python module entry points

### Keep **As-Is** for:

#### 1. Tool-Required Names
- `node_modules/` - NPM/Yarn package directory
- `packages/` - Source code organization
- Standard directory names expected by tools

#### 2. Source Code Directories
- [packages/spark-app/app/](mdc:packages/spark-app/app) - Main application code
- [packages/spark-app/tests/](mdc:packages/spark-app/tests) - Test suites
- [packages/monitoring/](mdc:packages/monitoring) - Infrastructure code
- [packages/shared/](mdc:packages/shared) - Shared resources

## File Naming Conventions

### Python Files

#### 1. Module Files
- **Snake_case for modules**: `base_indicator.py`, `market_dataset_generator.py`
- **Descriptive names**: `rsi_indicator.py`, `bollinger_bands_indicator.py`

#### 2. Class-Based Files
- **Match primary class**: `BacktestEngine` → `backtest_engine.py`
- **Indicator pattern**: `RSIIndicator` → `rsi_indicator.py`

#### 3. Test Files
- **Test prefix**: `test_` + module name
- **Examples**:
  - `test_rsi_indicator.py`
  - `test_backtest_engine.py`
  - `test_hyperliquid_connector.py`

#### 4. Utility Scripts
- **Purpose-based naming**: `create_market_datasets.py`, `refresh_test_market_data.py`
- **Action verbs**: `generate_report.py`, `lint_project.py`

### Configuration Files

#### 1. JSON Configuration
- **Purpose-based**: `config.json`, `tsconfig.json`, `package.json`
- **Tool-specific**: `tsconfig.base.json`, `tsconfig.spec.json`

#### 2. Environment Files
- `.env` - Main environment variables
- `.env.example` - Template environment file
- `.env.*` - Environment-specific variants

#### 3. Tool Configuration
- **Dotfile convention**: `.prettierrc`, `.gitignore`, `.prettierignore`
- **INI format**: `pytest.ini`, `grafana.ini`

### Shell Scripts

#### 1. Utility Scripts
- **Action-based**: `bootstrap.sh`, `new_indicator.sh`
- **Descriptive**: `start-services.sh`, `cleanup.sh`

#### 2. Executable scripts should have `.sh` extension

### Documentation Files

#### 1. Markdown Files
- **Purpose-based**: `README.md`, `CONTRIBUTING.md`
- **Lowercase with hyphens**: `phase4-monitoring-control-interface.md`
- **Topic-based**: `logging.md`, `connectors.md`, `userguide.md`

#### 2. Documentation Structure
- Use descriptive names that match content purpose
- Maintain consistency within documentation categories

### Data Files

#### 1. Test Data
- **Pattern-based naming**: `ETH_1h_bull_1.csv`, `BTC_4h_bear_2.csv`
- **Include metadata**: symbol, timeframe, market regime, sequence number

#### 2. Generated Data
- **Timestamped results**: `indicator_market_timeframe_YYYY-MM-DD.html`
- **Method suffixes**: `dataset_z_score.csv`, `data_min_max.csv`

### Log Files

#### 1. Application Logs
- **Service-based**: `spark_stacker.log`
- **Component-based**: `balance.log`, `orders.log`, `markets.log`

#### 2. Directory Structure
- Use timestamped directories: `YYYY-MM-DD-HH-MM-SS_XXXXXXXX/`
- Organize by service/connector within log directories

## File Explorer Sorting Result

With these conventions, your directory structure will sort as:
```
📁 _htmlcov/           # Generated content (visible, top)
📁 _logs/              # Generated content (visible, top)
📁 __test_data__/      # Special Python directories
📁 __test_results__/   # Special Python directories
📁 .cursor/            # Hidden config (requires show hidden)
📁 .git/               # Hidden config (requires show hidden)
📁 .github/            # Hidden config (requires show hidden)
📁 .nx/                # Hidden config (requires show hidden)
📁 .pytest_cache/      # Hidden config (requires show hidden)
📁 .vscode/            # Hidden config (requires show hidden)
📁 app/                # Source code
📁 docs/               # Documentation
📁 node_modules/       # Dependencies (required name)
📁 packages/           # Source code (main content)
📁 tests/              # Test code
📄 .env                # Hidden config files
📄 .gitignore          # Hidden config files
📄 .prettierrc         # Hidden config files
📄 config.json         # Config files
📄 package.json        # Config files
📄 README.md           # Documentation
```

## Naming Patterns by Category

### Indicators
- **File**: `{indicator_name}_indicator.py`
- **Class**: `{IndicatorName}Indicator`
- **Test**: `test_{indicator_name}_indicator.py`
- **Examples**: `rsi_indicator.py`, `macd_indicator.py`, `bollinger_bands_indicator.py`

### Connectors
- **File**: `{exchange}_connector.py`
- **Class**: `{Exchange}Connector`
- **Test**: `test_{exchange}_connector.py`
- **Examples**: `hyperliquid_connector.py`, `coinbase_connector.py`

### Backtesting
- **Engine files**: `{component}_engine.py`
- **Manager files**: `{component}_manager.py`
- **Report files**: `{purpose}_report.py` or `generate_{type}.py`

### Tests
- **Unit tests**: `tests/{module}/unit/test_{component}.py`
- **Integration tests**: `tests/{module}/integration/test_{component}_{feature}.py`
- **Utilities**: `tests/_utils/{purpose}.py`
- **Helpers**: `tests/_helpers/{functionality}.py`

## Benefits

✅ **Developer Experience** - Quick access to frequently needed generated content
✅ **Tool Compatibility** - All standard conventions preserved
✅ **Clean Organization** - Content sorted logically in file explorers
✅ **Cross-Platform** - Works consistently across operating systems
✅ **Searchability** - Predictable naming makes files easy to find
✅ **Maintainability** - Clear patterns reduce cognitive load

## Decision Framework

When naming files and directories:

### For Directories:
1. **Is it configuration or metadata for a tool?** → Use `.` prefix
2. **Do developers frequently browse its contents?** → Use `_` prefix
3. **Is it a special Python directory?** → Use `__` prefix
4. **Does a tool require a specific name?** → Keep as-is
5. **Is it source code or main content?** → Use descriptive name without prefix

### For Files:
1. **What language/technology?** → Follow language conventions (snake_case for Python, kebab-case for docs)
2. **What's the primary purpose?** → Use descriptive, purpose-based names
3. **Is it a test file?** → Start with `test_`
4. **Is it configuration?** → Follow tool conventions (dotfiles, specific extensions)
5. **Is it generated content?** → Include metadata in name (timestamps, methods, etc.)

## References

- [.gitignore](mdc:.gitignore) - Contains ignore patterns for generated directories
- [packages/spark-app/Makefile](mdc:packages/spark-app/Makefile) - Build and test commands
- [packages/spark-app/pytest.ini](mdc:packages/spark-app/pytest.ini) - Test configuration
- [packages/spark-app/app/indicators/](mdc:packages/spark-app/app/indicators) - Indicator naming examples
- [packages/spark-app/tests/](mdc:packages/spark-app/tests) - Test structure examples

