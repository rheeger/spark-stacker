---
description: Git commit message conventions and standards for consistent version control history
globs:
alwaysApply: false
---
# Commit Message Conventions

## Standard Format

All commit messages **must** follow this format:
```
phase<X.Y.Z>: <type>(<scope>): <short description>
```

Where:
- `phase<X.Y.Z>` identifies the checklist phase (e.g., `phase3.5.1`)
- `<type>` is one of: feat, fix, docs, chore, refactor, test, style, perf
- `<scope>` is the component being modified (optional)
- `<short description>` is a concise explanation

## Phase Mapping

The phase numbers correlate to our project checklist structure in [packages/shared/docs/checklists/](mdc:packages/shared/docs/checklists):

### Major Phases
- **phase1**: System Design & Planning
- **phase2**: Core Development & Backtesting
- **phase3**: Integration & Dry Run
- **phase3.5**: Hyperliquid Hardening
- **phase3.5.1**: Indicator Testing & Reporting
- **phase3.5.2**: Strategy-Indicator Integration Fixes
- **phase4**: Monitoring & Control Interface
- **phase5**: Deployment & Live Trading
- **phase6**: Continuous Improvement & Expansion

### Subphase Numbering
For tasks within a specific section of a checklist:
```
phase3.5.1-4.2: feat(testing): Implement standardized data generator
```
This indicates work on section 4.2 within phase 3.5.1.

## Commit Types

### feat
**New features or functionality**
```
phase3.5.2: feat(strategy): Add strategy-specific position sizing
phase4: feat(monitoring): Implement Grafana dashboard for position tracking
phase3.5.1: feat(reporting): Add HTML report generation for indicator testing
```

### fix
**Bug fixes and corrections**
```
phase3.5.2: fix(strategy): Resolve "Market RSI-4H not found" error
phase3: fix(hyperliquid): Handle API rate limiting correctly
phase2: fix(backtesting): Fix position size calculation edge case
```

### docs
**Documentation updates**
```
phase3.5.2: docs(readme): Update strategy-indicator relationship explanation
phase4: docs(monitoring): Add Grafana setup instructions
phase1: docs(architecture): Document strategy-driven design principles
```

### chore
**Maintenance, configuration, and tooling**
```
phase3.5.1: chore(testing): Update test fixtures for new market data format
phase2: chore(deps): Update requirements.txt with new pandas version
phase6: chore(ci): Add automated deployment pipeline
```

### refactor
**Code restructuring without functional changes**
```
phase3.5.2: refactor(strategy): Convert to factory pattern for strategy creation
phase2: refactor(indicators): Extract common indicator processing logic
phase4: refactor(monitoring): Simplify metrics collection architecture
```

### test
**Adding or modifying tests**
```
phase3.5.2: test(integration): Add strategy-indicator integration tests
phase3.5.1: test(indicators): Add comprehensive RSI indicator tests
phase2: test(backtesting): Add position sizing unit tests
```

### style
**Code style and formatting**
```
phase3: style(connectors): Fix import organization and type hints
phase2: style(indicators): Apply black formatting to indicator modules
```

### perf
**Performance improvements**
```
phase3: perf(data): Implement caching for market data fetching
phase2: perf(backtesting): Optimize indicator calculation loops
phase4: perf(monitoring): Reduce metrics collection overhead
```

## Scope Guidelines

### Core Components
- `strategy` - Strategy configuration, execution, management
- `indicators` - Technical indicator implementations
- `connectors` - Exchange connector implementations
- `risk` - Risk management and position sizing
- `trading` - Trading engine and execution logic
- `data` - Data management and caching
- `config` - Configuration loading and validation

### Infrastructure Components
- `monitoring` - Grafana dashboards and metrics
- `testing` - Test infrastructure and utilities
- `ci` - Continuous integration and deployment
- `docs` - Documentation and guides
- `tools` - Development tools and scripts

### Feature-Specific Scopes
- `hyperliquid` - Hyperliquid-specific implementations
- `coinbase` - Coinbase-specific implementations
- `backtesting` - Backtesting framework components
- `reporting` - Report generation and output
- `webhooks` - Webhook server and handling

## Examples by Phase

### Phase 3.5.2 Examples (Strategy-Indicator Integration)
```
phase3.5.2: feat(strategy): Implement strategy-driven execution flow
phase3.5.2: feat(symbols): Add exchange symbol conversion utilities
phase3.5.2: fix(strategy): Remove legacy symbol parsing from main.py
phase3.5.2: refactor(trading): Update signal processing with strategy context
phase3.5.2: test(integration): Add strategy-indicator relationship tests
phase3.5.2: docs(readme): Update configuration examples with position sizing
```

### Phase 4 Examples (Monitoring & Control)
```
phase4: feat(monitoring): Implement real-time position dashboard
phase4: feat(control): Add strategy enable/disable controls
phase4: fix(metrics): Resolve Prometheus metric collection issues
phase4: chore(grafana): Update dashboard JSON exports
phase4: test(monitoring): Add dashboard integration tests
```

### Phase 3.5.1 Examples (Indicator Testing)
```
phase3.5.1: feat(testing): Implement market data generator for indicators
phase3.5.1: feat(reporting): Add HTML report generation with charts
phase3.5.1: test(indicators): Add comprehensive RSI testing suite
phase3.5.1: fix(data): Handle missing market data gracefully
phase3.5.1: docs(testing): Document indicator testing methodology
```

## Checklist Integration

### Completing Checklist Items
When completing a checklist item, reference the specific section:
```
phase3.5.2-1.1: feat(symbols): Create symbol conversion utilities
phase3.5.2-2.1: refactor(strategy): Update StrategyManager constructor
phase3.5.2-3.2: test(strategy): Add strategy manager integration tests
```

### Multi-Item Commits
For commits that address multiple related checklist items:
```
phase3.5.2: feat(strategy): Complete strategy configuration schema (items 2.1-2.3)
phase3.5.1: test(indicators): Add RSI and MACD test suites (items 3.1-3.2)
```

## Quality Standards

### ✅ Good Examples
```
phase3.5.2: feat(strategy): Implement strategy-specific position sizing
phase4: fix(monitoring): Resolve Grafana dashboard loading issue
phase3.5.1: test(hyperliquid): Add comprehensive API response validation
phase2: refactor(backtesting): Convert to factory pattern for indicators
```

### ❌ Avoid These Patterns
```
Fixed bug                           # No phase, no context
Update code                         # Too vague
WIP                                # Work-in-progress shouldn't be committed
Added new feature                   # No phase, no scope
phase3: stuff                       # Too vague, no type
```

## Branch Naming

### Feature Branches
Match commit convention format:
```
phase3.5.2/feat/strategy-position-sizing
phase4/feat/monitoring-dashboard
phase3.5.1/fix/indicator-data-handling
```

### Integration Branches
For multi-phase work:
```
integration/phase3.5.2-strategy-integration
integration/phase4-monitoring-implementation
```

## Automation Integration

### Commit Message Validation
The project can use git hooks to validate commit messages:
```bash
#!/bin/sh
# .git/hooks/commit-msg
commit_regex='^phase[0-9]+(\.[0-9]+)*(-[0-9]+\.[0-9]+)?: (feat|fix|docs|chore|refactor|test|style|perf)(\(.+\))?: .+'

if ! grep -qE "$commit_regex" "$1"; then
    echo "Invalid commit message format!"
    echo "Format: phase<X.Y.Z>: <type>(<scope>): <description>"
    exit 1
fi
```

### Changelog Generation
Standardized commits enable automated changelog generation:
```markdown
## Phase 3.5.2: Strategy-Indicator Integration

### Features
- **strategy**: Implement strategy-specific position sizing
- **symbols**: Add exchange symbol conversion utilities

### Fixes
- **strategy**: Resolve "Market RSI-4H not found" error
- **trading**: Fix signal processing with strategy context

### Documentation
- **readme**: Update strategy-indicator relationship explanation
```

## Benefits

### 1. **Clear Traceability**
- Commits map directly to checklist items
- Easy to track phase progress
- Clear development history

### 2. **Automated Tooling**
- Changelog generation
- Release management
- Progress tracking

### 3. **Team Coordination**
- Consistent format across developers
- Clear context for code reviews
- Easy identification of related changes

### 4. **Project Management**
- Progress visualization
- Phase completion tracking
- Issue correlation

## References

- [Phase 3.5.2 Checklist](mdc:packages/shared/docs/checklists/phase3.5.2-strategy-indicator-integration.md)
- [Development Roadmap](mdc:packages/shared/docs/roadmap.md)
- [Project Structure](mdc:README.md)
