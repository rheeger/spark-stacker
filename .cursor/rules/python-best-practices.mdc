---
description:
globs:
alwaysApply: true
---
# Python Best Practices for Spark Stacker

## Environment and Dependencies

- Always use the `.venv` virtual environment in [packages/spark-app/.venv](mdc:packages/spark-app/.venv)
- Run Python scripts with explicit `python3` command
- Use full pathnames to folders and scripts when running via terminal
- Python version: 3.11+

## Code Style

- Use type hints for function parameters and return values
- Follow PEP 8 style guidelines
- Use docstrings for modules, classes, and functions
- Prefer f-strings for string formatting

## Logging

```python
import logging

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
```

## Error Handling

- Use try/except blocks for error handling
- Create custom exception classes for specific error types
- Log exceptions with context information
- Clean up resources in finally blocks

## Testing

- Use pytest for all tests
- Write unit tests for core functionality
- Use fixtures for shared test resources
- Use mocks for external dependencies

## Entry Points

```python
def main() -> None:
    # High-level logic here

if __name__ == "__main__":
    main()
```
