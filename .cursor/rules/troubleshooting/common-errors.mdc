---
description: Common errors and debugging solutions for Spark Stacker development and configuration issues
globs:
alwaysApply: false
---
# Common Errors and Solutions

## Configuration Errors

### 1. "Market RSI-4H not found" Error

**Symptom**:
```
ERROR: Market RSI-4H not found
CRITICAL: Failed to fetch data for market RSI-4H
```

**Root Cause**: Indicator names being treated as market symbols in strategy configuration.

**Solution**: Fix strategy configuration to separate markets from indicators:

```json
// ❌ INCORRECT - Using indicator name as market
{
  "strategies": [
    {
      "name": "my_strategy",
      "market": "RSI-4H",          // This is an indicator name!
      "exchange": "hyperliquid",
      "indicators": ["rsi_4h"]
    }
  ]
}

// ✅ CORRECT - Proper separation
{
  "strategies": [
    {
      "name": "my_strategy",
      "market": "ETH-USD",         // Market symbol
      "exchange": "hyperliquid",
      "indicators": ["rsi_4h"]     // Indicator reference
    }
  ]
}
```

**Prevention**: Always use market symbols like "ETH-USD", "BTC-USD" in strategy `market` field.

### 2. Invalid Market Symbol Format

**Symptom**:
```
ValueError: Invalid symbol format: ETH. Use 'SYMBOL-USD' format.
StrategyConfigurationError: Symbol must contain hyphen: BTC
```

**Solution**: Use standardized symbol format in all strategy configurations:

```json
// ❌ INCORRECT - Exchange-specific formats
{
  "strategies": [
    {"market": "ETH"},          // Missing pair
    {"market": "ETHUSD"},       // Concatenated format
    {"market": "ETH_USD"}       // Wrong separator
  ]
}

// ✅ CORRECT - Standard format
{
  "strategies": [
    {"market": "ETH-USD"},      // Standard format
    {"market": "BTC-USD"},      // Standard format
    {"market": "SOL-USD"}       // Standard format
  ]
}
```

### 3. Missing Exchange Field

**Symptom**:
```
KeyError: 'exchange'
StrategyConfigurationError: Missing config key: exchange
```

**Solution**: Always specify exchange in strategy configuration:

```json
// ❌ MISSING - No exchange specified
{
  "strategies": [
    {
      "name": "my_strategy",
      "market": "ETH-USD",
      "indicators": ["rsi_4h"]
      // Missing exchange field!
    }
  ]
}

// ✅ CORRECT - Exchange specified
{
  "strategies": [
    {
      "name": "my_strategy",
      "market": "ETH-USD",
      "exchange": "hyperliquid",  // Required field
      "indicators": ["rsi_4h"]
    }
  ]
}
```

### 4. Indicator Not Found

**Symptom**:
```
IndicatorNotFoundError: Indicator 'rsi_daily' not found
Strategy references undefined indicator
```

**Solution**: Ensure all strategy indicators are defined in configuration:

```json
{
  "strategies": [
    {
      "indicators": ["rsi_daily", "macd_4h"]  // Both must be defined below
    }
  ],
  "indicators": [
    {
      "name": "rsi_daily",     // ✅ Matches strategy reference
      "type": "rsi",
      "timeframe": "1d"
    },
    {
      "name": "macd_4h",       // ✅ Matches strategy reference
      "type": "macd",
      "timeframe": "4h"
    }
    // ❌ Missing "rsi_daily" would cause error
  ]
}
```

### 5. Position Sizing Configuration Errors

**Symptom**:
```
KeyError: 'risk_per_trade_pct'
ValueError: equity_percentage must be <= 1.0 (100%)
PositionSizingError: Missing required parameter for risk_based method
```

**Solution**: Provide all required parameters for chosen position sizing method:

```json
// ❌ INCOMPLETE - Missing required parameters
{
  "position_sizing": {
    "method": "risk_based"
    // Missing required parameters!
  }
}

// ✅ COMPLETE - All required parameters
{
  "position_sizing": {
    "method": "risk_based",
    "risk_per_trade_pct": 0.02,       // Required for risk_based
    "default_stop_loss_pct": 0.05,    // Required for risk_based
    "max_position_size_usd": 1000.0
  }
}

// ❌ INVALID VALUES
{
  "position_sizing": {
    "method": "percent_equity",
    "equity_percentage": 1.5           // > 1.0 (150%) is invalid
  }
}

// ✅ VALID VALUES
{
  "position_sizing": {
    "method": "percent_equity",
    "equity_percentage": 0.05,         // 5% is valid
    "max_position_size_usd": 2000.0
  }
}
```

## Runtime Errors

### 6. Exchange Connection Failures

**Symptom**:
```
ExchangeConnectionError: Failed to connect to hyperliquid
HTTPError: 401 Unauthorized
ConnectionTimeoutError: Request timeout after 30 seconds
```

**Diagnosis Steps**:
```bash
# Check environment variables
cd packages/spark-app
cat ../shared/.env | grep -E "(WALLET_ADDRESS|PRIVATE_KEY|API_KEY)"

# Test exchange connectivity
.venv/bin/python -c "
from app.connectors.connector_factory import ConnectorFactory
import json

with open('../shared/config.json') as f:
    config = json.load(f)

try:
    connector = ConnectorFactory.create_connector(config['exchanges'][0])
    balance = connector.get_account_info()
    print(f'✅ Connected successfully: {balance}')
except Exception as e:
    print(f'❌ Connection failed: {e}')
"
```

**Solutions**:
- **Invalid credentials**: Check API keys in `.env` file
- **Network issues**: Verify internet connectivity
- **Rate limiting**: Implement backoff and retry logic
- **Testnet/Mainnet mismatch**: Ensure `testnet` setting matches credentials

### 7. Data Fetching Failures

**Symptom**:
```
DataFetchError: Failed to fetch historical data for ETH
EmptyDataError: No data returned for symbol ETH-USD, timeframe 4h
```

**Diagnosis**:
```bash
# Test symbol conversion
.venv/bin/python -c "
from app.core.symbol_converter import convert_symbol_for_exchange

symbol = 'ETH-USD'
exchange = 'hyperliquid'
converted = convert_symbol_for_exchange(symbol, exchange)
print(f'{symbol} → {converted} for {exchange}')
"

# Test data fetching
.venv/bin/python -c "
from app.connectors.connector_factory import ConnectorFactory
import json

with open('../shared/config.json') as f:
    config = json.load(f)

connector = ConnectorFactory.create_connector(config['exchanges'][0])
data = connector.get_historical_data('ETH', '4h')
print(f'Data shape: {data.shape if data is not None else \"None\"}')
"
```

**Solutions**:
- **Symbol format issues**: Ensure proper symbol conversion for exchange
- **Invalid timeframes**: Check supported timeframes for exchange
- **Market hours**: Some markets may not have data for requested time periods
- **API limits**: Implement proper rate limiting and caching

### 8. Virtual Environment Issues

**Symptom**:
```
ModuleNotFoundError: No module named 'app'
ImportError: No module named 'pandas'
bash: python: command not found
```

**Solution**: Always use the correct virtual environment:

```bash
# ❌ WRONG - Using system Python
cd packages/spark-app
python app/main.py                    # May use wrong Python version

# ✅ CORRECT - Using project virtual environment
cd packages/spark-app
source .venv/bin/activate              # Activate environment
python app/main.py                     # Uses correct Python

# ✅ ALTERNATIVE - Direct path (recommended)
cd packages/spark-app
.venv/bin/python app/main.py          # Explicit virtual environment

# Check if virtual environment is active
which python                           # Should point to .venv/bin/python
pip list | grep pandas                 # Should show installed packages
```

### 9. Test Execution Failures

**Symptom**:
```
pytest: command not found
No module named pytest
FAILED tests/test_strategy.py - ImportError
```

**Solution**: Run tests with virtual environment and correct working directory:

```bash
# ❌ WRONG - Wrong directory or environment
pytest tests/                         # May not find correct pytest
python -m pytest                      # May use wrong Python

# ✅ CORRECT - Proper test execution
cd packages/spark-app                 # Correct working directory
.venv/bin/python -m pytest tests/ -v  # Use project environment

# For specific test categories
.venv/bin/python -m pytest tests/unit/ --cov=app
.venv/bin/python -m pytest tests/integration/ -v
.venv/bin/python -m pytest tests/indicators/unit/test_rsi_indicator.py -v
```

### 10. Import Path Issues

**Symptom**:
```
ModuleNotFoundError: No module named 'app.core'
ImportError: attempted relative import with no known parent package
```

**Solution**: Ensure correct working directory and Python path:

```bash
# ❌ WRONG - Running from wrong directory
cd packages/
python spark-app/app/main.py          # Wrong working directory

# ✅ CORRECT - Run from package directory
cd packages/spark-app                 # Correct working directory
python app/main.py                     # Correct relative imports

# For scripts that need to import from app/
cd packages/spark-app
PYTHONPATH=. python scripts/validate_config.py
```

## Validation Scripts

### Configuration Validation
```bash
# Test complete configuration loading
cd packages/spark-app
.venv/bin/python -c "
import json
from app.core.strategy_config import StrategyConfigLoader
from app.indicators.indicator_factory import IndicatorFactory

print('Loading configuration...')
with open('../shared/config.json') as f:
    config = json.load(f)

print('Loading strategies...')
strategies = StrategyConfigLoader.load_strategies(config['strategies'])
print(f'✅ Loaded {len(strategies)} strategies')

print('Loading indicators...')
indicators = IndicatorFactory.create_indicators_from_config(config['indicators'])
print(f'✅ Loaded {len(indicators)} indicators')

print('Validating relationships...')
StrategyConfigLoader.validate_indicators(strategies, indicators)
print('✅ Strategy-indicator validation passed')

print('All configuration validation passed!')
"
```

### Position Sizing Validation
```bash
# Test position sizing configuration
cd packages/spark-app
.venv/bin/python -c "
import json
from app.risk_management.risk_manager import RiskManager

with open('../shared/config.json') as f:
    config = json.load(f)

print('Creating risk manager...')
risk_manager = RiskManager.from_config(config)
print('✅ Risk manager created successfully')

# Test position sizing for each strategy
for strategy_name in ['eth_multi_timeframe_strategy']:
    test_data = {'account_balance': 10000, 'current_price': 3000}
    size = risk_manager.calculate_position_size(strategy_name, test_data)
    print(f'Strategy {strategy_name}: Position size = \${size:.2f}')
"
```

### Symbol Conversion Validation
```bash
# Test symbol conversion for all strategies
cd packages/spark-app
.venv/bin/python -c "
import json
from app.core.symbol_converter import convert_symbol_for_exchange

with open('../shared/config.json') as f:
    config = json.load(f)

print('Testing symbol conversion...')
for strategy in config['strategies']:
    market = strategy['market']
    exchange = strategy['exchange']
    converted = convert_symbol_for_exchange(market, exchange)
    print(f'{market} → {converted} ({exchange})')
"
```

## Emergency Debugging

### Quick Health Check
```bash
cd packages/spark-app

# 1. Check Python environment
echo "Python: $(which python)"
echo "Python version: $(python --version)"

# 2. Check virtual environment
echo "Virtual env: $(.venv/bin/python -c 'import sys; print(sys.executable)')"

# 3. Check imports
.venv/bin/python -c "import app.main; print('✅ App imports work')"

# 4. Check configuration
.venv/bin/python -c "
import json
with open('../shared/config.json') as f:
    config = json.load(f)
print(f'✅ Config loaded: {len(config.get(\"strategies\", []))} strategies')
"

# 5. Check tests
.venv/bin/python -m pytest --collect-only | grep "test session starts"
```

### Reset Environment
```bash
# If everything is broken, reset the environment
cd packages/spark-app

# Remove and recreate virtual environment
rm -rf .venv
python3 -m venv .venv
source .venv/bin/activate
pip install -r requirements.txt

# Verify installation
.venv/bin/python -c "import pandas, numpy; print('✅ Dependencies installed')"
```

## References

- [Configuration Documentation](mdc:packages/shared/docs/configuration.md)
- [Python Best Practices](mdc:.cursor/rules/development/python-best-practices.mdc)
- [Strategy Development Guide](mdc:packages/shared/docs/strategy-development.md)
- [Main README Troubleshooting](mdc:README.md)
