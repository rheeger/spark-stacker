name: CI Quick Tests

on:
  push:
    branches: [main, phase3.5.1]
  pull_request:
    branches: [main, phase3.5.1]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: packages/spark-app/requirements.txt

      # Explicit caching configuration
      - name: Cache pip dependencies
        uses: actions/cache@v3
        id: pip-cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('packages/spark-app/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Verify cache status
        run: |
          echo "Cache hit: ${{ steps.pip-cache.outputs.cache-hit }}"
          echo "Cache key: ${{ runner.os }}-pip-${{ hashFiles('packages/spark-app/requirements.txt') }}"
          if [ "${{ steps.pip-cache.outputs.cache-hit }}" == "true" ]; then
            echo "Cache was successfully used!"
            ls -la ~/.cache/pip || echo "Cannot list pip cache directory"
          else
            echo "Cache was not found or is being initialized"
          fi

      - name: Install dependencies
        run: |
          cd packages/spark-app
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov

      - name: Set up environment and debug info
        run: |
          echo "Python executable: $(which python)"
          echo "Python version: $(python --version)"
          echo "Pip version: $(pip --version)"
          echo "Working directory: $(pwd)"
          echo "OS: $(uname -a)"

          # Create environment variable file for debugging
          cd packages/spark-app
          echo "PYTHONPATH=$PWD" > .env
          echo "PATH=$PATH" >> .env

          # Print directory structure
          find . -type f -name "*.py" | grep -E "app/utils|tests/" | sort

      - name: Test direct import
        run: |
          cd packages/spark-app
          python tests/simple_import_test.py

      - name: Run quick tests
        run: |
          cd packages/spark-app
          # Export environment variables
          export PYTHONPATH=$PYTHONPATH:$PWD
          export PYTEST_RUNNING=True
          export PYTHONUNBUFFERED=1

          # Run the tests with verbose output
          python -m pytest -xvs -m "not slow" --cov=app tests/

      - name: Generate coverage report
        run: |
          cd packages/spark-app
          # Export environment variables
          export PYTHONPATH=$PYTHONPATH:$PWD
          export PYTEST_RUNNING=True
          export PYTHONUNBUFFERED=1

          python -m pytest -xvs --cov=app --cov-report=xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: packages/spark-app/coverage.xml
