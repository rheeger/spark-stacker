name: Quick CI

on:
  push:
    branches: [main, phase3.5.1]
  pull_request:
    branches: [main, phase3.5.1]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11 (with pip cache)
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          # Enable pip cache to speed up subsequent workflow runs
          cache: 'pip'
          # Use the requirements file to create a cache hash, so the cache is
          # automatically invalidated when dependencies change.
          cache-dependency-path: packages/spark-app/requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd packages/spark-app
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Debug workspace and files
        run: |
          echo "Working directory: $(pwd)"
          echo "Listing app/utils directory:"
          ls -la packages/spark-app/app/utils
          echo "Content of __init__.py:"
          cat packages/spark-app/app/utils/__init__.py
          echo "Content of config.py:"
          cat packages/spark-app/app/utils/config.py | head -10
          echo "Python path:"
          python -c "import sys; print(sys.path)"

      - name: Create enhanced direct import test
        run: |
          cd packages/spark-app
          cat > test_direct_import.py << 'EOL'
          import sys
          import os

          # Print the working directory and files in key directories
          print(f"Working directory: {os.getcwd()}")
          print(f"Files in current directory: {os.listdir('.')}")
          print(f"Files in app directory: {os.listdir('./app')}")
          print(f"Files in app/utils directory: {os.listdir('./app/utils')}")

          # Add the app directory to the Python path
          app_path = os.path.abspath('./app')
          sys.path.insert(0, app_path)
          print(f"Added {app_path} to sys.path")
          print(f"sys.path: {sys.path[:3]}")

          # Check if config.py exists and is readable
          config_path = os.path.join(app_path, 'utils', 'config.py')
          print(f"Looking for config.py at: {config_path}")
          print(f"File exists: {os.path.exists(config_path)}")
          print(f"File is readable: {os.access(config_path, os.R_OK)}")
          print(f"File size: {os.path.getsize(config_path) if os.path.exists(config_path) else 'N/A'}")

          # Try direct file import first
          try:
              import importlib.util
              print("Trying direct file import via importlib...")
              spec = importlib.util.spec_from_file_location("config", config_path)
              config_module = importlib.util.module_from_spec(spec)
              spec.loader.exec_module(config_module)
              print("Successfully imported config via file path")
              print(f"Module attributes: {dir(config_module)[:10]}")
          except Exception as e:
              print(f"Direct file import failed: {e}")

          # Try standard imports
          try:
              print("\nTrying standard import from app.utils...")
              from app.utils import config
              print("Successfully imported app.utils.config")
              print(f"Module path: {config.__file__}")
              print(f"Module attributes: {dir(config)[:10]}")

              from app.core import trading_engine
              print("Successfully imported app.core.trading_engine")
              print("All imports OK!")
              exit(0)
          except ImportError as e:
              print(f"Import error: {e}")

              # Try without app prefix
              try:
                  print("\nTrying import from utils without app prefix...")
                  from utils import config
                  print("Successfully imported utils.config")
                  print(f"Module path: {config.__file__}")

                  from core import trading_engine
                  print("Successfully imported core.trading_engine")
                  print("All imports OK with direct import!")
                  exit(0)
              except ImportError as e2:
                  print(f"Second import error: {e2}")

                  # One more attempt with absolute imports
                  try:
                      print("\nTrying absolute imports...")
                      sys.path.insert(0, os.path.dirname(app_path))
                      print(f"Updated sys.path: {sys.path[:3]}")

                      import app.utils.config
                      print("Successfully imported app.utils.config as absolute import")
                      import app.core.trading_engine
                      print("Successfully imported app.core.trading_engine as absolute import")
                      print("All imports OK with absolute imports!")
                      exit(0)
                  except ImportError as e3:
                      print(f"Third import error: {e3}")
                      exit(1)
          EOL

          python test_direct_import.py

      - name: Create simple import fix
        if: always()
        run: |
          cd packages/spark-app
          # Create a simpler test that copies the files to make imports work
          cat > copy_files_for_import.py << 'EOL'
          import os
          import shutil

          # Create a utils module directly in the path
          os.makedirs('utils', exist_ok=True)
          shutil.copy('app/utils/config.py', 'utils/config.py')
          with open('utils/__init__.py', 'w') as f:
              f.write('"""Utils module"""')

          print("Created utils module with config.py")

          # Create a core module directly in the path
          os.makedirs('core', exist_ok=True)
          shutil.copy('app/core/trading_engine.py', 'core/trading_engine.py')
          with open('core/__init__.py', 'w') as f:
              f.write('"""Core module"""')

          print("Created core module with trading_engine.py")
          EOL

          python copy_files_for_import.py

          # Test the imports directly
          python -c "from utils import config; from core import trading_engine; print('Imports successful')"

      - name: Run tests with fixed imports
        if: always()
        run: |
          cd packages/spark-app
          # Create a simplified test file that works with the copied modules
          cat > tests/simple_import_test.py << 'EOL'
          import sys
          import os
          import pytest

          # Make sure the parent directory is in the path (for 'utils' and 'core')
          sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

          def test_imports():
              """Test that we can import the required modules."""
              from utils import config
              from core import trading_engine
              assert hasattr(config, 'AppConfig'), "AppConfig not found in config module"
              assert hasattr(trading_engine, 'TradingEngine'), "TradingEngine not found in trading_engine module"
          EOL

          PYTHONPATH=$PYTHONPATH:$(pwd) python -m pytest tests/simple_import_test.py -v

      - name: Generate coverage report
        if: always()
        run: |
          cd packages/spark-app
          PYTHONPATH=$PYTHONPATH:$(pwd) python -m coverage xml || true

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: packages/spark-app/coverage.xml
# Test comment
